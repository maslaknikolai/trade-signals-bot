import IOrderRequest from "IOrderRequestData"

export default function messageToOrderRequestData(message: string): null | IOrderRequest {
    const isManualOrder = !!message.match(/^man/)

    try {
        if (isManualOrder) {
            return parseManual(message)
        } else {
            return parseMessageFromRusina(message)
        }
    } catch {
        return null
    }
}

function parseManual(message: string): IOrderRequest {
    const lines = message.split('\n')
    const coin = lines.find(l => l.match('c: ')).match(/c: (.+)/)[1]
    const direction = lines.find(l => l.match('d: ')).match(/d: (.+)/)[1]
    const stopLoss = lines.find(l => l.match('sl: ')).match(/sl: (.+)/)[1]
    const takeProfit = lines.find(l => l.match('tp: ')).match(/tp: (.+)/)[1]

    return {
        coin,
        isBuy: direction === 'long',
        stopLoss,
        takeProfit
    }
}

/* Example:
"#KLAY/USDT #LONG

–ú–æ–Ω–µ—Ç–∞ –ø—Ä–æ–±–∏–ª–∞ —Ö–æ—Ä–æ—à–æ –Ω–∞—Ç–æ—Ä–≥–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è 0.265$.
–Ø –æ–∂–∏–¥–∞—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ (—Ç–µ–º –±–æ–ª–µ–µ –ë–∏—Ç–æ–∫ –ª–µ—Ç–∏—Ç).

–ú–æ–∂–Ω–æ –≤—Ö–æ–¥–∏—Ç—å —Å–µ–π—á–∞—Å, –º–æ–∂–Ω–æ –ø–æ —Ñ–∞–∫—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è - —Ç—É—Ç –∫–∞–∂–¥—ã–π —Å–∞–º —Ä–µ—à–∞–µ—Ç —É–∂–µ (—è –ø–æ —Ç–µ–∫—É—â–∏–º –∑–∞—à–ª–∞) üëåüèΩ

–¢–µ–π–∫ - –ø—Ä–æ—Ñ–∏—Ç—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ ‚úÖ

–°—Ç–æ–ø - –ª–æ—Å—Å: 0.259$ ‚ùå"
*/

function parseMessageFromRusina(message: string): IOrderRequest {
    const splitted = message.split('\n')

    const coin = splitted[0].split(' ')[0].substring(1).replace('/USDT', '')
    const direction = splitted[0].split(' ')[1].substring(1) === 'LONG' ? 'long' : 'short'
    const stopLoss = message.match(/–°—Ç–æ–ø - –ª–æ—Å—Å: (.+)\$/)[1]

    return {
        coin,
        isBuy: direction === 'long',
        stopLoss
    }
}